// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PINChat.Persistence.Db.Contexts;

#nullable disable

namespace PINChat.Persistence.Db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250731081759_Fix Contact relations")]
    partial class FixContactrelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PINChat.Persistence.Db.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(max)")
                        .HasDefaultValue(new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 225, 0, 0, 0, 225, 8, 3, 0, 0, 0, 9, 109, 34, 72, 0, 0, 0, 111, 80, 76, 84, 69, 255, 255, 255, 0, 0, 0, 138, 138, 138, 230, 230, 230, 127, 127, 127, 236, 236, 236, 217, 217, 217, 97, 97, 97, 132, 132, 132, 135, 135, 135, 225, 225, 225, 242, 242, 242, 130, 130, 130, 199, 199, 199, 245, 245, 245, 121, 121, 121, 92, 92, 92, 160, 160, 160, 72, 72, 72, 190, 190, 190, 176, 176, 176, 19, 19, 19, 38, 38, 38, 147, 147, 147, 27, 27, 27, 67, 67, 67, 52, 52, 52, 83, 83, 83, 115, 115, 115, 210, 210, 210, 173, 173, 173, 155, 155, 155, 45, 45, 45, 34, 34, 34, 78, 78, 78, 186, 186, 186, 107, 107, 107, 189, 149, 9, 62, 0, 0, 5, 86, 73, 68, 65, 84, 120, 156, 237, 157, 139, 90, 226, 64, 12, 70, 25, 16, 80, 42, 136, 138, 202, 69, 240, 250, 254, 207, 184, 182, 221, 174, 133, 22, 90, 104, 254, 252, 105, 55, 231, 5, 156, 243, 81, 231, 146, 73, 50, 189, 30, 137, 237, 205, 122, 57, 96, 253, 113, 60, 147, 151, 247, 240, 195, 132, 61, 14, 16, 209, 226, 51, 36, 124, 178, 71, 130, 97, 250, 29, 50, 30, 217, 99, 1, 48, 233, 135, 28, 236, 209, 136, 19, 45, 54, 121, 191, 176, 102, 15, 72, 152, 237, 235, 83, 216, 103, 206, 30, 146, 36, 209, 253, 115, 40, 240, 204, 30, 149, 28, 185, 201, 101, 143, 142, 44, 135, 127, 151, 190, 50, 198, 236, 177, 73, 48, 157, 31, 211, 139, 121, 101, 15, 175, 41, 179, 221, 199, 41, 191, 31, 150, 83, 246, 24, 155, 48, 185, 169, 208, 75, 88, 237, 218, 250, 223, 120, 250, 243, 220, 227, 243, 109, 203, 30, 237, 249, 236, 142, 206, 46, 71, 152, 183, 234, 167, 28, 244, 171, 141, 74, 120, 186, 250, 26, 178, 135, 94, 139, 201, 213, 69, 126, 41, 155, 133, 121, 201, 225, 93, 3, 191, 132, 185, 233, 19, 199, 172, 177, 95, 194, 253, 140, 45, 114, 140, 47, 17, 191, 152, 47, 182, 74, 41, 195, 250, 235, 67, 53, 27, 131, 83, 235, 86, 208, 47, 198, 220, 110, 103, 39, 44, 24, 194, 27, 91, 105, 159, 55, 113, 193, 16, 250, 108, 169, 60, 47, 0, 193, 16, 110, 217, 90, 191, 44, 32, 130, 63, 203, 6, 91, 44, 99, 10, 18, 52, 19, 111, 140, 150, 48, 195, 39, 27, 155, 184, 35, 81, 24, 17, 76, 4, 58, 112, 223, 104, 140, 133, 239, 244, 220, 163, 224, 121, 24, 8, 57, 202, 109, 70, 203, 89, 176, 5, 123, 43, 176, 225, 3, 91, 112, 4, 22, 12, 97, 68, 54, 188, 44, 98, 113, 14, 236, 205, 219, 39, 220, 112, 195, 21, 140, 224, 130, 33, 68, 84, 67, 236, 98, 152, 194, 61, 41, 202, 31, 11, 139, 236, 168, 134, 152, 99, 211, 62, 47, 84, 195, 38, 193, 209, 186, 220, 185, 161, 27, 186, 161, 27, 186, 161, 27, 186, 97, 184, 114, 67, 55, 108, 196, 173, 27, 186, 161, 27, 186, 33, 156, 235, 206, 27, 250, 111, 40, 1, 247, 42, 216, 13, 221, 208, 13, 255, 15, 195, 107, 55, 116, 67, 55, 60, 73, 173, 138, 3, 55, 116, 195, 206, 27, 222, 184, 161, 27, 186, 161, 27, 118, 220, 16, 153, 91, 154, 241, 77, 53, 84, 16, 12, 79, 76, 193, 123, 13, 67, 98, 66, 205, 112, 172, 34, 24, 194, 152, 148, 238, 173, 145, 211, 150, 193, 201, 109, 211, 249, 68, 83, 56, 149, 23, 26, 43, 69, 6, 103, 247, 173, 145, 211, 150, 193, 201, 109, 235, 254, 87, 42, 93, 113, 120, 10, 78, 197, 254, 76, 209, 144, 84, 25, 188, 86, 19, 100, 181, 35, 122, 85, 51, 100, 53, 65, 65, 20, 142, 150, 195, 74, 19, 214, 155, 106, 88, 201, 236, 3, 53, 67, 90, 237, 186, 214, 84, 179, 166, 53, 89, 144, 236, 49, 112, 10, 94, 223, 51, 173, 125, 27, 175, 244, 73, 163, 98, 38, 134, 87, 53, 51, 81, 50, 36, 22, 232, 29, 54, 10, 4, 193, 19, 132, 23, 144, 166, 172, 136, 134, 248, 250, 202, 24, 102, 192, 20, 93, 230, 156, 194, 44, 118, 214, 153, 106, 168, 149, 192, 42, 134, 76, 65, 149, 93, 13, 183, 16, 24, 213, 183, 37, 15, 183, 231, 128, 70, 36, 131, 91, 233, 172, 112, 249, 196, 189, 122, 234, 245, 30, 225, 134, 236, 238, 38, 51, 92, 251, 157, 148, 37, 189, 1, 159, 76, 35, 193, 227, 240, 59, 241, 162, 79, 80, 252, 206, 116, 232, 217, 148, 60, 147, 198, 148, 244, 34, 23, 228, 131, 173, 215, 67, 151, 92, 112, 139, 45, 82, 176, 219, 26, 110, 83, 140, 20, 236, 249, 130, 221, 97, 40, 1, 106, 200, 150, 75, 64, 182, 25, 162, 247, 193, 74, 64, 70, 77, 185, 157, 91, 50, 144, 255, 136, 70, 94, 19, 122, 128, 9, 218, 248, 72, 145, 247, 136, 86, 58, 237, 226, 62, 83, 35, 31, 41, 238, 186, 155, 125, 248, 253, 101, 8, 50, 52, 212, 212, 27, 243, 35, 218, 249, 9, 81, 247, 221, 134, 126, 66, 76, 6, 152, 153, 78, 208, 41, 242, 161, 97, 114, 71, 200, 2, 242, 147, 141, 141, 54, 208, 57, 164, 195, 138, 236, 32, 98, 9, 178, 73, 223, 22, 159, 157, 147, 237, 183, 107, 226, 228, 123, 128, 108, 98, 187, 129, 16, 91, 129, 72, 52, 109, 193, 162, 161, 236, 108, 106, 110, 38, 237, 73, 239, 107, 204, 156, 42, 114, 200, 134, 247, 249, 193, 252, 34, 178, 113, 83, 11, 113, 210, 67, 100, 79, 250, 86, 78, 247, 121, 100, 179, 135, 216, 157, 216, 203, 144, 61, 35, 242, 175, 13, 139, 200, 6, 134, 45, 190, 217, 45, 123, 203, 102, 225, 86, 237, 16, 81, 65, 35, 23, 22, 251, 116, 222, 80, 58, 84, 99, 42, 72, 147, 32, 93, 94, 98, 239, 125, 89, 233, 84, 83, 123, 143, 60, 74, 191, 3, 97, 111, 219, 38, 125, 1, 101, 229, 218, 233, 31, 242, 137, 67, 198, 78, 23, 93, 143, 8, 163, 30, 125, 50, 19, 142, 26, 162, 10, 75, 140, 60, 14, 136, 172, 150, 53, 114, 194, 232, 126, 166, 66, 247, 179, 77, 144, 149, 164, 239, 108, 185, 24, 108, 94, 155, 133, 207, 20, 91, 179, 110, 225, 51, 237, 252, 43, 157, 232, 226, 46, 254, 103, 138, 238, 225, 194, 223, 187, 161, 203, 72, 153, 5, 164, 9, 248, 190, 10, 236, 112, 6, 190, 36, 159, 59, 155, 78, 177, 19, 105, 202, 59, 239, 164, 184, 221, 40, 248, 197, 108, 56, 97, 169, 145, 86, 87, 140, 152, 185, 254, 81, 113, 160, 209, 245, 50, 207, 183, 238, 140, 51, 212, 120, 201, 234, 144, 43, 189, 243, 112, 164, 211, 104, 160, 72, 95, 41, 67, 67, 175, 61, 84, 17, 141, 171, 97, 141, 23, 128, 79, 129, 142, 20, 127, 97, 107, 241, 234, 240, 140, 140, 247, 63, 234, 244, 50, 169, 98, 133, 202, 91, 220, 218, 240, 139, 89, 33, 182, 0, 35, 173, 13, 76, 61, 54, 210, 91, 128, 137, 94, 7, 193, 186, 188, 74, 158, 141, 135, 232, 146, 244, 203, 184, 147, 218, 2, 204, 88, 11, 124, 53, 125, 137, 118, 4, 51, 230, 2, 95, 205, 91, 99, 199, 123, 116, 87, 136, 166, 44, 155, 5, 114, 22, 252, 5, 190, 154, 231, 203, 27, 216, 76, 63, 216, 131, 175, 201, 199, 101, 81, 128, 41, 174, 52, 84, 158, 135, 243, 29, 183, 154, 39, 120, 9, 230, 231, 109, 115, 6, 90, 111, 2, 72, 50, 174, 31, 5, 24, 216, 92, 224, 171, 185, 171, 231, 24, 105, 188, 165, 134, 226, 186, 70, 20, 64, 179, 91, 62, 130, 170, 0, 178, 102, 175, 124, 20, 167, 182, 0, 11, 235, 27, 152, 122, 44, 143, 109, 1, 30, 245, 186, 200, 163, 89, 151, 69, 1, 166, 118, 78, 240, 18, 172, 10, 91, 128, 182, 45, 240, 213, 28, 212, 104, 182, 113, 133, 175, 98, 156, 23, 212, 124, 140, 67, 143, 252, 62, 206, 246, 41, 247, 82, 242, 1, 114, 187, 113, 138, 38, 244, 221, 176, 245, 184, 97, 251, 113, 195, 246, 227, 134, 237, 199, 13, 219, 143, 27, 182, 31, 55, 108, 63, 110, 216, 126, 220, 176, 253, 184, 97, 251, 201, 27, 226, 95, 26, 97, 144, 15, 237, 163, 154, 200, 114, 217, 75, 153, 210, 121, 94, 76, 151, 131, 60, 212, 209, 184, 27, 55, 107, 25, 203, 113, 150, 188, 248, 7, 195, 21, 130, 211, 40, 164, 120, 22, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 });

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PINChat.Persistence.Db.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId", "ContactUserId")
                        .IsUnique();

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("PINChat.Persistence.Db.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PINChat.Persistence.Db.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PINChat.Persistence.Db.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PINChat.Persistence.Db.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PINChat.Persistence.Db.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PINChat.Persistence.Db.Entities.Contact", b =>
                {
                    b.HasOne("PINChat.Persistence.Db.Entities.ApplicationUser", "ContactUser")
                        .WithMany("AddedByOthers")
                        .HasForeignKey("ContactUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PINChat.Persistence.Db.Entities.ApplicationUser", "User")
                        .WithMany("MyContacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PINChat.Persistence.Db.Entities.Message", b =>
                {
                    b.HasOne("PINChat.Persistence.Db.Entities.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PINChat.Persistence.Db.Entities.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PINChat.Persistence.Db.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AddedByOthers");

                    b.Navigation("MyContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
